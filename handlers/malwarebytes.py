"""
Handle incoming Malwarebytes requests
"""
import hmac
import hashlib


class Malwarebytes(object):
    def __init__(self, security_token=None):
        if security_token is None:
            security_token = str("")
        self.security_token = security_token

    def validate_signature(self, request):
        """
        Their docs say you can set a security_token but it's not available in
        their dashboard so this validation is on hold.
        """
        if not request.headers.get("X-MWB-Signature"):
            return False

        valid_signature = request.headers.get("X-MWB-Signature")

        signature = (
            hmac.new(
                bytes(self.security_token, "latin-1"),
                msg=bytes(str(request.data), "latin-1"),
                digestmod=hashlib.sha256,
            )
            .hexdigest()
            .upper()
        )
        print(valid_signature)
        print(signature)

        return valid_signature == signature

    def format(self, payload):
        required_keys = {
            "machine_name",
            "machine_ip",
            "os_platform",
            "os_release_name",
            "severity",
            "threat_name",
            "status",
        }

        if payload.keys() < required_keys:
            return self.invalid_data()

        if payload.keys() >= required_keys:
            message = {
                "text": "Malwarebytes Threat Event",
                "blocks": [
                    {
                        "type": "header",
                        "text": {
                            "type": "plain_text",
                            "text": "Malwarebytes Threat Event",
                        },
                    },
                    {
                        "type": "section",
                        "text": {
                            "type": "mrkdwn",
                            "text": f"*Problem on {payload['machine_name']}* ({payload['machine_ip']}) running {payload['os_platform']} {payload['os_release_name']}",
                        },
                        "fields": [
                            {"type": "mrkdwn", "text": "*Severity*"},
                            {"type": "mrkdwn", "text": "*Status*"},
                            {
                                "type": "plain_text",
                                "text": payload["severity"],
                            },
                            {"type": "plain_text", "text": payload["status"]},
                        ],
                    },
                    {
                        "type": "section",
                        "text": {
                            "type": "mrkdwn",
                            "text": f"*Detected: {payload['threat_name']}*",
                        },
                    },
                ],
            }
            return message
