"""
Handle incoming Malwarebytes requests
"""
import hmac
import hashlib
from .handler import Handler


class Malwarebytes(Handler):
    """
    Malwarebytes handler class
    """

    my_url = None
    subscription_url = "https://api.malwarebytes.com/nebula/v1/webhooks/subscriptions"

    def __init__(self, security_token=None):
        if security_token is None:
            security_token = str("")
        self.security_token = security_token

    def validate_signature(self, request):
        """
        Their docs say you can set a security_token but it's not available in
        their dashboard so this validation is on hold.
        """
        if not request.headers.get("X-MWB-Signature"):
            return False

        valid_signature = request.headers.get("X-MWB-Signature")

        signature = (
            hmac.new(
                bytes(self.security_token, "latin-1"),
                msg=bytes(str(request.data), "latin-1"),
                digestmod=hashlib.sha256,
            )
            .hexdigest()
            .upper()
        )
        print(valid_signature)
        print(signature)

        return valid_signature == signature

    def format(self, payload):
        """
        Format a Slack message based on specific payload data.

        Args:
            payload(dict) - dict of information to be formatted

        Return:
            dict - formatted object
        """
        required_keys = {
            "machine_name",
            "machine_ip",
            "os_platform",
            "os_release_name",
            "severity",
            "threat_name",
            "status",
        }

        if len(payload.keys()) < len(required_keys):
            return {"error": "Not all required keys present."}

        if payload.keys() >= required_keys:
            message = {
                "text": "Malwarebytes Threat Event",
                "blocks": [
                    {
                        "type": "header",
                        "text": {
                            "type": "plain_text",
                            "text": "Malwarebytes Threat Event",
                        },
                    },
                    {
                        "type": "section",
                        "text": {
                            "type": "mrkdwn",
                            "text": (
                                f"*Problem on {payload['machine_name']}* ({payload['machine_ip']}) running "
                                f"{payload['os_platform']} {payload['os_release_name']}"
                            ),
                        },
                        "fields": [
                            {"type": "mrkdwn", "text": "*Severity*"},
                            {"type": "mrkdwn", "text": "*Status*"},
                            {
                                "type": "plain_text",
                                "text": payload["severity"],
                            },
                            {"type": "plain_text", "text": payload["status"]},
                        ],
                    },
                    {
                        "type": "section",
                        "text": {
                            "type": "mrkdwn",
                            "text": f"*Detected: {payload['threat_name']}*",
                        },
                    },
                ],
            }
            return message

    def subscribe(self, **kwargs):
        """
        Subscribe to the Malwarebytes webhook.

        https://api.malwarebytes.com/nebula/v1/docs#operation/api.v2.nebula.post.webhooks.subscriptions

        Args:
            kwargs(dict): object if required and optional subscription info

        Return:
            boolean - True/False on subscription success
        """
        import requests

        url = kwargs.get("url", None)
        token = kwargs.get("secret", "")

        if url is None:
            return False

        data = {
            "url": url,
            "description": "string",
            "enabled": True,
            "events": ["all"],
            "custom_headers": [{}],
            "max_retries": 10,
            "secret_token": token,
        }
        print(data)
        return False

        response = requests.post(self.subscription_url, data=data)

        if "client_id" in response:
            return True

        return False
